// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define all enums that stores constant values 
enum Role {
  STUDENT
  STAFF
}

enum OrderStatus {
  PENDING
  ORDERED
  RETURNED
  CANCELED
  OVERDUE
}

enum FineStatus {
  PAID
  UNPAID
  PENDING
}

// --------------------------------------------
// Define all required tables
// Base class User
model User {
  userID      String   @id @default(dbgenerated("gen_random_uuid()"))
  firstName   String
  lastName    String
  username    String   @unique
  password    String   @unique
  email       String   @unique
  phoneNumber String?
  address     String?
  role        Role
  student     Student?
  staff       Staff?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Subclass Student
model Student {
  studentID String  @id
  major     String?
  amountDue Float?

  userID String @unique
  user   User   @relation(fields: [userID], references: [userID], onDelete: Cascade)

  // relations to Payment and BookOrder
  payments   Payment[] // Student - Payment (one to many) 
  bookOrders BookOrder[] // Student - BookOrder (one to many)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Subclass Staff
model Staff {
  staffID  String    @id
  hireDate DateTime?
  position String?

  userID String @unique
  user   User   @relation(fields: [userID], references: [userID], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Book model
model Book {
  bookID        String    @id @default(dbgenerated("gen_random_uuid()"))
  title         String
  author        String
  publisher     String
  numberOfPages Int
  genre         String
  datePublished DateTime?
  description   String?
  imageURL      String? // storing the image URL

  // relations to BookInventory and BookOrder
  bookItems BookItem[] // Book - BookItem (one to many)
  inventory BookInventory? // Book - BookInventory (one to one)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// BookInventory for managing quantities
model BookInventory {
  bookID   String @unique
  quantity Int
  book     Book   @relation(fields: [bookID], references: [bookID])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([bookID])
}

// BookOrder for tracking user orders
model BookOrder {
  orderID    String      @id @default(dbgenerated("gen_random_uuid()"))
  totalItems Int
  orderDate  DateTime
  dueDate    DateTime
  status     OrderStatus // Values might include "Processing", "Borrowed", "Returned", etc.

  // studentID is a foreign key to Student
  studentID String
  student   Student @relation(fields: [studentID], references: [studentID])

  // relations to BookItem and Fine
  bookItems BookItem[] // BookOrder - BookItem (one to many)
  fine      Fine? // BookOrder - Fine (one to one)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// BookItem for managing books in orders (Association table between Book and BookOrder)
model BookItem {
  orderID String
  bookID  String
  order   BookOrder @relation(fields: [orderID], references: [orderID])
  book    Book      @relation(fields: [bookID], references: [bookID])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([orderID, bookID]) // primary key to allow multiple book items per order and the same book in different orders
}

// Fine for tracking fines associated with orders
model Fine {
  fineID String     @id @default(dbgenerated("gen_random_uuid()"))
  amount Float
  status FineStatus // Values include "Unpaid", "Paid"

  // orderID is a foreign key to BookOrder
  orderID String    @unique
  order   BookOrder @relation(fields: [orderID], references: [orderID])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Payment for tracking user payments
model Payment {
  paymentID     String   @id @default(dbgenerated("gen_random_uuid()"))
  paymentMethod String
  paymentDate   DateTime
  amount        Float

  // studentID is a foreign key to Student
  studentID String
  student   Student @relation(fields: [studentID], references: [studentID])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
