// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define all enums that stores constant values 
enum Role {
  STUDENT
  STAFF
}

enum OrderStatus {
  PENDING
  ORDERED
  BORROWED
  RETURNED
  RENEWED
  CANCELED
  OVERDUE
}

enum FineStatus {
  PAID
  UNPAID
  PENDING
}

// --------------------------------------------
// Define all required tables
// Base class User
model User {
  userID      String   @id @default(dbgenerated("gen_random_uuid()"))
  firstName   String
  lastName    String
  username    String   @unique
  password    String   @unique
  email       String   @unique
  phoneNumber String?
  address     String?
  role        Role
  student     Student?
  staff       Staff?
}

// Subclass Student
model Student {
  studentID String      @id
  userID    String      @unique
  user      User        @relation(fields: [userID], references: [userID], onDelete: Cascade)
  major     String?
  amountDue Int?
  // Student - BookOrder (one to many)
  bookOrder BookOrder[]
  // Student - Payment (one to many)
  payment   Payment[]
}

// Subclass Staff
model Staff {
  staffID String @id
  userID  String @unique
  user    User   @relation(fields: [userID], references: [userID], onDelete: Cascade)
}

model Book {
  bookID        String     @id @default(dbgenerated("gen_random_uuid()"))
  title         String
  author        String
  publisher     String
  numberOfPages Int
  condition     String // Values might include "New", "Used", "Good", etc.
  genre         String
  isAvailable   Boolean
  // Book - BookItem (one to many)
  bookItems     BookItem[]
}

model BookOrder {
  orderID    String      @id @default(dbgenerated("gen_random_uuid()"))
  dueDate    DateTime
  status     OrderStatus // Values might include "Processing", "Borrowed", "Returned", etc.
  borrowDate DateTime
  // BookOrder - BookItem (one to many)
  bookItems  BookItem[]
  // Studdent - BookOrder (one to many)
  studentID  String
  student    Student     @relation(fields: [studentID], references: [studentID], onDelete: Cascade)
  // BookOrder - Fine (one to one)
  fine       Fine?
}

// Association table between Book and BookOrder (many to many)
model BookItem {
  orderID  String
  bookID   String
  quantity Int
  order    BookOrder @relation(fields: [orderID], references: [orderID], onDelete: Cascade)
  book     Book      @relation(fields: [bookID], references: [bookID], onDelete: Cascade)

  @@id([orderID, bookID]) // primary key to allow multiple book items per order and the same book in different orders
}

model Fine {
  fineID      String     @id @default(dbgenerated("gen_random_uuid()"))
  amount      Float
  status      FineStatus // e.g., "Unpaid", "Paid"
  bookOrderID String     @unique
  bookOrder   BookOrder  @relation(fields: [bookOrderID], references: [orderID], onDelete: Cascade)
}

model Payment {
  paymentID     String   @id @default(dbgenerated("gen_random_uuid()"))
  paymentMethod String
  date          DateTime
  amount        Float
  studentID     String
  student       Student  @relation(fields: [studentID], references: [studentID], onDelete: Cascade)
}
