// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  STAFF
}

// Base class User
model User {
  userID      Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  username    String   @unique
  password    String   @unique  
  email       String   @unique
  phoneNumber String?
  address     String?
  role        Role
  student     Student?
  staff       Staff?
}

// Subclass Student
model Student {
  studentID String  @id
  userID    Int     @unique
  user      User    @relation(fields: [userID], references: [userID], onDelete: Cascade)
  major     String?
  amountDue Float?
  payments  Payment[]
  bookOrders  BookOrder[]
}

// Subclass Staff
model Staff {
  staffID   String @id
  userID    Int    @unique
  user      User   @relation(fields: [userID], references: [userID], onDelete: Cascade)
  hireDate  DateTime
  position  String?
}

// Subclass Book
model Book {
  bookID      Int       @id @default(autoincrement())
  title       String
  author      String
  publisher   String
  numberOfPages Int
  genre       String
  imageURL    String? // storing the image URL
  bookItems   BookItem[]
  inventory   BookInventory @relation(fields: [bookID], references: [bookID])
}

// BookInventory for managing quantities
model BookInventory {
  bookID    Int
  quantity  Int
  book      Book @relation(fields: [bookID], references: [bookID])

  @@id([bookID])
}

// BookOrder for tracking user orders
model BookOrder {
  orderID    Int      @id @default(autoincrement())
  studentID  String
  totalItems Int
  orderDate  DateTime
  dueDate    DateTime
  status     String   // Values might include "Processing", "Borrowed", "Returned", etc.
  student    Student @relation(fields: [studentID], references: [studentID])
  bookItems  BookItem[]
  fines      Fine[]
}

// BookItem for managing books in orders
model BookItem {
  orderID  Int
  bookID   Int
  order    BookOrder @relation(fields: [orderID], references: [orderID])
  book     Book @relation(fields: [bookID], references: [bookID])
  @@id([orderID, bookID]) // primary key to allow multiple book items per order and the same book in different orders
}

// Fine for tracking fines associated with orders
model Fine {
  fineID      Int       @id @default(autoincrement())
  orderID     Int 
  amount      Float
  status      String    // e.g., "Unpaid", "Paid"
  order       BookOrder @relation(fields: [orderID], references: [orderID])
}

// Payment for tracking user payments
model Payment {
  paymentID   Int       @id @default(autoincrement())
  studentID   String
  paymentMethod String
  date        DateTime
  amount      Float
  student     Student @relation(fields: [studentID], references: [studentID])
}
